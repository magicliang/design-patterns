/**
 * project name: design-patterns
 * <p>
 * description: 命令模式
 * <p>
 * 在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。
 * <p>
 * 命令模式可以对发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。这就是命令模式的模式动机。
 * <p>
 * 命令模式是把调用转化为包含参数的消息体的一种模式。
 * <p>
 * 命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。
 * <p>
 * 其基本时序具有反向依赖，逐步生成闭包的特点
 * <p>
 * 1 生成 receiver。
 * 2 使用 receiver 注入 command。
 * 3 使用 command 注入 invoker。
 * 4 invoker 调用 command。
 * <p>
 * 命令模式的优点
 * <p>
 * 降低系统的耦合度。
 * 新的命令可以很容易地加入到系统中。
 * 可以比较容易地设计一个命令队列和宏命令（组合命令）。
 * 可以方便地实现对请求的Undo和Redo。
 * <p>
 * 命令模式的缺点
 * <p>
 * 使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。
 * <p>
 * 适用环境
 * <p>
 * 在以下情况下可以使用命令模式：
 * <p>
 * 系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
 * 系统需要在不同的时间指定请求、将请求排队和执行请求。
 * 系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
 * 系统需要将一组操作组合在一起，即支持宏命令
 *
 * 这是一种把通信解耦的设计模式。
 *
 * @author magicliang
 * <p>
 * date: 2019-09-27 17:37
 */
package com.magicliang.patterns.behavioral.command;